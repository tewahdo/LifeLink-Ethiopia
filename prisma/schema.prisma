generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int? 
  token_type         String? 
  scope              String? 
  id_token           String? 
  session_state      String? 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  role          String    @default("citizen")
  goals         String?
  routines      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts          Account[]
  sessions          Session[]

  healthcareRecords HealthcareRecord[]

  immigrationStatuses ImmigrationStatus[]

  bankAccounts      BankAccount[]

  telecomAccounts   TelecomAccount[]    
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model HealthcareRecord {
  id         String   @id @default(cuid())
  userId     String
  diagnosis  String
  treatment  String
  date       DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
}

model ImmigrationStatus {
  id        String   @id @default(cuid())
  userId    String
  visaType  String
  status    String
  user      User     @relation(fields: [userId], references: [id])
}

model BankAccount {
  id            String   @id @default(cuid())
  userId        String
  bankName      String
  accountNumber String
  balance       Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User           @relation(fields: [userId], references: [id])
  transactions  BankTransaction[]

  @@index([userId])
}

model BankTransaction {
  id           String      @id @default(cuid())
  accountId    String
  type         String      // "deposit" or "withdrawal"
  amount       Float
  description  String?
  date         DateTime    @default(now())

  account      BankAccount @relation(fields: [accountId], references: [id])

  @@index([accountId])
}

model TelecomAccount {
  id             String        @id @default(cuid())
  userId         String
  providerName   String
  phoneNumber    String
  balance        Float         @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  user           User          @relation(fields: [userId], references: [id])
  callRecords    CallRecord[]

  @@index([userId])
}

model CallRecord {
  id              String         @id @default(cuid())
  telecomAccountId String
  callType        String         // e.g., "incoming", "outgoing"
  duration        Int            // call duration in seconds
  date            DateTime       @default(now())

  telecomAccount  TelecomAccount @relation(fields: [telecomAccountId], references: [id])

  @@index([telecomAccountId])
}
model PoliceOfficer {
  id          String    @id @default(cuid())
  name        String
  badgeNumber String    @unique
  rank        String
  assignedIncidents IncidentReport[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model IncidentReport {
  id            String      @id @default(cuid())
  officerId     String?
  incidentType  String
  description   String
  location      String
  status        String      @default("reported") 
  reportedAt    DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  officer       PoliceOfficer? @relation(fields: [officerId], references: [id])
}
